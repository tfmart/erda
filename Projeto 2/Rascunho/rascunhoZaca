#include <stdio.h>
#include<stdlib.h>
#include<string.h>

struct no{
    int freq;
    char chave[50], palavra[50];
    struct no *esq, *dir;
};

typedef struct no no;

int percorre_arvore(no *raiz,char palavra[]);
int insere(no **raiz,char palavra[]);

int main(int argc, char *argv[])
{
    no *raiz;
    int i, cont = 0, nNUMERO, resposta;
    char palavra[50];

    raiz = NULL;

    while((scanf ("%s", palavra)) != EOF)
    {
        resposta = insere(&raiz, palavra);
        if(resposta == 0)
        {
            printf("Ja existe na arvore\n");
        }
        else if(resposta == 1)
        {
            printf("Palavra inserida com sucesso\n");
        }
        else if(resposta == -1)
        {
            printf("Palavra nao foi inserida\n");
        }
    }
    return 0;
}

int percorre_arvore(no *raiz,char palavra[])
{
    if(raiz == NULL)
    {
        return 0; //palavra não foi encontrada, pode ser inserida
    }
    else if(strcmp(raiz->chave, palavra) == 0)
    {
        return 1; //NÃO INSERE SE JÁ EXISTIR NA ARVORE, INCREMENTA FREQUENCIA
    }
    else if(strcmp(raiz->chave, palavra) < 0)
    {
        return (percorre_arvore(raiz->dir,palavra));
    }
    else if(strcmp(raiz->chave, palavra) > 0)
    {
        return (percorre_arvore(raiz->esq,palavra));
    }
}

int insere(no **raiz,char palavra[])
{
    int resultado, frequencia = 0;

    resultado = percorre_arvore(&raiz, palavra); //recebe o resultado da função que percorreu a arvore

    switch (resultado) //fiz isso por graca de otimizacao msm kkkkk sem mais motivos. Codigo antigo comentado abaixo.
    {
        case 0:
            if(*raiz == NULL)
            {
                (*raiz) = (no*)malloc(sizeof(no));
                strcpy((*raiz)->chave, palavra);
                (*raiz)->esq = NULL;
                (*raiz)->dir = NULL;
            }
            else if(strcmp((*raiz)->chave, palavra) > 0)
            {
                return(insere(&(*raiz)->dir ,palavra));
            }
            else if(strcmp((*raiz)->chave, palavra) < 0)
            {
                return (insere(&(*raiz)->esq, palavra));
            }
            else
            {
                return -1;
            }
        break;
    
        case 1: //caso palavra ja tenha sido encontrada na arvore, apenas incrementa freq.
            {
                frequencia = (*raiz)->freq;
                frequencia++;
                (*raiz)->freq = frequencia;
            }
            break;

        default:
            break;
    }
}

/*

 if(resultado == 0)
    {
        if(*raiz == NULL)
        {
            (*raiz) = (no*)malloc(sizeof(no));
            strcpy((*raiz)->chave, palavra);
            (*raiz)->esq = NULL;
            (*raiz)->dir = NULL;
        }
        else if(strcmp((*raiz)->chave, palavra) > 0)
        {
            return(insere(&(*raiz)->dir ,palavra));
        }
        else if(strcmp((*raiz)->chave, palavra) < 0)
        {
            return (insere(&(*raiz)->esq, palavra));
        }
        else
        {
            return -1;
        }
    }
    if(resultado == 1)
    {
        //Chamar funcao para aumentar frequencia da palavra
        raiz->freq = (raiz->freq) + 1;        
    }

*/
